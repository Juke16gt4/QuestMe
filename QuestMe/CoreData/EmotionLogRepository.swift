//
//  EmotionLogRepository.swift
//  QuestMe
//
//  üìÇ Ê†ºÁ¥çÂ†¥ÊâÄ:
//      QuestMe/Core/Repository/EmotionLogRepository.swift
//
//  üéØ „Éï„Ç°„Ç§„É´„ÅÆÁõÆÁöÑ:
//      ÊÑüÊÉÖ„É≠„Ç∞„ÅÆÂèñÂæó„Éª‰øùÂ≠ò„ÇíÁµ±ÂêàÁöÑ„Å´Êâ±„ÅÜ„É™„Éù„Ç∏„Éà„É™„ÄÇ
//      - SQLiteEmotionLogDTOÔºàDBÁõ¥ÂàóÂåñÁî®Ôºâ„Å® CoreDataEmotionLogDTOÔºàUI/Â±•Ê≠¥Ë°®Á§∫Áî®Ôºâ„ÇíÂê∏Âèé„ÄÇ
//      - UI Â±§„Å´„ÅØÂ∏∏„Å´ CoreDataEmotionLogDTO „ÇíËøî„Åô„Åì„Å®„Åß‰∏ÄË≤´ÊÄß„ÇíÁ¢∫‰øù„ÄÇ
//      - Â∞ÜÊù•ÁöÑ„Å´„Çπ„Éà„É¨„Éº„Ç∏ÊñπÂºè„ÇíÂàá„ÇäÊõø„Åà„Å¶„ÇÇ UI ÂÅ¥„ÅÆÂΩ±Èüø„ÇíÊúÄÂ∞èÂåñ„Åô„Çã„ÄÇ
//
//  üîó ‰æùÂ≠ò:
//      - Core/Model/SQLiteEmotionLogDTO.swift
//      - CoreData/EmotionLog.swiftÔºàCoreDataEmotionLogDTO ÂÆöÁæ©Ôºâ
//      - Core/Storage/SQLiteStorageService.swift
//      - Managers/EmotionLogStorageManager.swift
//
//  üîó Èñ¢ÈÄ£/ÈÄ£Âãï„Éï„Ç°„Ç§„É´:
//      - Views/Logs/ConversationCalendarView.swiftÔºàUIË°®Á§∫Ôºâ
//      - CompanionEmotionManager.swiftÔºàÊÑüÊÉÖÊàêÈï∑„ÅÆ‰øùÂ≠ò„Éà„É™„Ç¨Ôºâ
//
//  üë§ ‰ΩúÊàêËÄÖ: Ê¥•Êùë Ê∑≥‰∏Ä
//  üìÖ ‰ΩúÊàêÊó•: 2025Âπ¥10Êúà24Êó•
//

import Foundation

final class EmotionLogRepository {
    static let shared = EmotionLogRepository()
    private init() {}

    // MARK: - ÂÖ®‰ª∂ÂèñÂæóÔºàUIÁî®Ôºâ
    func allLogs() -> [CoreDataEmotionLogDTO] {
        var unified: [CoreDataEmotionLogDTO] = []

        // 1. SQLite „Åã„ÇâÂèñÂæó
        let group = DispatchGroup()
        group.enter()
        SQLiteStorageService.shared.fetchEmotionLogs { sqliteLogs in
            let converted = sqliteLogs.map { sqlite in
                CoreDataEmotionLogDTO(
                    id: UUID(), // SQLite „ÅÆ Int64 id „Çí UUID „Å´Â§âÊèõÔºà„Éû„ÉÉ„Éî„É≥„Ç∞„É´„Éº„É´„ÅØË¶ÅÊ§úË®éÔºâ
                    timestamp: ISO8601DateFormatter().date(from: sqlite.createdAt) ?? Date(),
                    text: sqlite.note ?? "",
                    emotion: sqlite.emotionType,
                    ritual: nil,
                    metadata: nil,
                    topic: ConversationSubject(label: "general")
                )
            }
            unified.append(contentsOf: converted)
            group.leave()
        }
        group.wait()

        // 2. UserDefaultsÔºàEmotionLogStorageManagerÔºâ„Åã„ÇâÂèñÂæó
        let localLogs = EmotionLogStorageManager.shared.loadAll()
        unified.append(contentsOf: localLogs)

        // 3. ‰∏¶„Å≥Êõø„ÅàÔºàÊñ∞„Åó„ÅÑÈ†ÜÔºâ
        unified.sort { $0.timestamp > $1.timestamp }

        return unified
    }

    // MARK: - ‰øùÂ≠ò
    func save(_ log: CoreDataEmotionLogDTO) {
        EmotionLogStorageManager.shared.save(log)
    }

    // MARK: - Êõ¥Êñ∞
    func update(_ log: CoreDataEmotionLogDTO) {
        EmotionLogStorageManager.shared.update(log)
    }

    // MARK: - ÂâäÈô§
    func delete(_ log: CoreDataEmotionLogDTO) {
        EmotionLogStorageManager.shared.delete(log)
    }
}
