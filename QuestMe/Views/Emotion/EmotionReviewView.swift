//
//  EmotionReviewView.swift
//  QuestMe
//
//  üìÇ Ê†ºÁ¥çÂ†¥ÊâÄ:
//      QuestMe/Views/Emotion/EmotionReviewView.swift
//
//  üéØ „Éï„Ç°„Ç§„É´„ÅÆÁõÆÁöÑ:
//      ÊÑüÊÉÖÂ±•Ê≠¥„Çí„Ç∞„É©„Éï„Å®„É™„Çπ„Éà„ÅßË°®Á§∫„Åó„ÄÅCompanionOverlay „Å®ÈÄ£Âãï„Åó„Å¶
//      ÊúÄÊñ∞„ÅÆÊÑüÊÉÖÂÇæÂêë„Çí CompanionSpeechBubbleView „ÅßÂêπ„ÅçÂá∫„ÅóË°®Á§∫„Åô„Çã„ÄÇ
//      - EmotionLogStorageManager „Åã„ÇâË™≠„ÅøËæº„Åø„ÄÇ
//      - CompanionOverlay „Å´„Çà„ÇãÈü≥Â£∞Ê°àÂÜÖ„Å®Âêπ„ÅçÂá∫„ÅóË°®Á§∫„ÇíÁµ±Âêà„ÄÇ
//      - ÊÑüÊÉÖ„Çø„Ç§„ÉóÈÅ∏Êäû„Å®Â§âÂåñË™¨ÊòéÊ©üËÉΩ„ÇíÊèê‰æõ„ÄÇ
//      - „Ç≥„É≥„Éë„Éã„Ç™„É≥„ÅÆÊàêÈï∑Áä∂ÊÖã„Çí CompanionGrowthView „ÅßË°®Á§∫ÂèØËÉΩ„ÄÇ
//
//  üîó ‰æùÂ≠ò„Éï„Ç°„Ç§„É´:
//      - Models/EmotionLog.swift
//      - Models/EmotionType.swift
//      - Managers/EmotionLogStorageManager.swift
//      - Managers/CompanionEmotionManager.swift
//      - Views/Companion/CompanionSpeechBubbleView.swift
//      - Views/Companion/CompanionGrowthView.swift
//      - UI/CompanionOverlay.swift
//      - Charts
//
//  üë§ ‰ΩúÊàêËÄÖ: Ê¥•Êùë Ê∑≥‰∏Ä
//  üìÖ ‰øÆÊ≠£Êó•: 2025Âπ¥10Êúà23Êó•
//

import SwiftUI
import Charts

struct EmotionReviewView: View {
    @State private var logs: [EmotionLog] = []
    @State private var selectedEmotion: EmotionType = .happy
    @State private var showGrowthView = false
    @ObservedObject private var overlay = CompanionOverlay.shared

    var body: some View {
        ScrollView {
            VStack(spacing: 16) {
                if let text = overlay.bubbleText {
                    CompanionSpeechBubbleView(text: text, mood: overlay.currentMood)
                }

                Picker("ÊÑüÊÉÖ„Çø„Ç§„Éó", selection: $selectedEmotion) {
                    ForEach(EmotionType.allCases, id: \.self) { emotion in
                        Text(emotion.label).tag(emotion)
                    }
                }
                .pickerStyle(.segmented)
                .padding(.horizontal)

                Button("üó£ ÊÑüÊÉÖ„ÅÆÂ§âÂåñ„ÇíË™¨Êòé") {
                    speakTrend(for: selectedEmotion)
                }
                .buttonStyle(.borderedProminent)

                Button("üß† „Ç≥„É≥„Éë„Éã„Ç™„É≥„ÅÆÊàêÈï∑„ÇíË¶ã„Çã") {
                    showGrowthView = true
                }
                .buttonStyle(.bordered)

                Chart {
                    ForEach(filteredData(), id: \.id) { point in
                        LineMark(
                            x: .value("Êó•‰ªò", point.date),
                            y: .value("È†ªÂ∫¶", point.count)
                        )
                        .foregroundStyle(point.emotion.color)
                        .symbol(.circle)
                    }
                }
                .frame(height: 240)
                .padding(.horizontal)

                ForEach(logs) { log in
                    VStack(alignment: .leading, spacing: 4) {
                        Text(log.date.formatted(date: .abbreviated, time: .shortened))
                            .font(.headline)
                        Text("ÊÑüÊÉÖ: \(log.emotion.label)")
                            .foregroundColor(log.emotion.color)
                        if let note = log.note {
                            Text("„É°„É¢: \(note)")
                                .foregroundColor(.secondary)
                        }
                    }
                    .padding(.horizontal)
                    .padding(.vertical, 6)
                    .background(Color.gray.opacity(0.05))
                    .cornerRadius(8)
                }
            }
            .padding()
        }
        .onAppear {
            logs = EmotionLogStorageManager.shared.loadAll()

            // ‚úÖ ÊÑüÊÉÖÂ±•Ê≠¥„Çí„Ç≥„É≥„Éë„Éã„Ç™„É≥„Å´ÂèçÊò†
            for log in logs {
                CompanionEmotionManager.shared.update(from: log.emotion)
            }

            let summary = summarizeEmotionLogs()
            overlay.speak(summary, emotion: determineDominantEmotion())
            overlay.checkSpecialAchievements(logs: logs)
        }
        .onDisappear {
            overlay.closingAfterReview()
        }
        .navigationTitle("ÊÑüÊÉÖ„É¨„Éì„É•„Éº")
        .sheet(isPresented: $showGrowthView) {
            CompanionGrowthView()
        }
    }

    // MARK: - „Ç∞„É©„ÉïÁî®„Éá„Éº„ÇøÊäΩÂá∫
    func filteredData() -> [EmotionPoint] {
        let grouped = Dictionary(grouping: logs.filter { $0.emotion == selectedEmotion },
                                 by: { Calendar.current.startOfDay(for: $0.date) })
        return grouped.map { (date, entries) in
            EmotionPoint(date: date, count: entries.count, emotion: selectedEmotion, id: UUID())
        }.sorted { $0.date < $1.date }
    }

    struct EmotionPoint: Identifiable {
        var date: Date
        var count: Int
        var emotion: EmotionType
        var id: UUID
    }

    // MARK: - Companion „Å´„Çà„ÇãË™û„Çä„Åã„Åë
    func speakTrend(for emotion: EmotionType) {
        let points = filteredData().sorted { $0.date > $1.date }
        guard points.count >= 2 else {
            overlay.speak("ÊÑüÊÉÖÂ±•Ê≠¥„ÅåÂ∞ë„Å™„ÅÑ„Åü„ÇÅ„ÄÅÂ§âÂåñ„ÇíË™¨Êòé„Åß„Åç„Åæ„Åõ„Çì„ÄÇ", emotion: .neutral)
            return
        }

        let latest = points[0]
        let previous = points[1]
        let delta = latest.count - previous.count
        let direction = delta > 0 ? "Â¢óÂä†" : "Ê∏õÂ∞ë"

        let dateStr = DateFormatter.localizedString(from: latest.date, dateStyle: .medium, timeStyle: .none)
        let message = "\(emotion.label) „ÅÆË®òÈå≤„ÅØÂâçÂõû„Çà„Çä \(abs(delta)) ‰ª∂ \(direction) „Åó„Åæ„Åó„ÅüÔºà\(dateStr)Ôºâ„ÄÇ"
        overlay.speak(message, emotion: emotion)
    }

    // MARK: - ÊÑüÊÉÖ„É≠„Ç∞„ÅÆË¶ÅÁ¥ÑÁîüÊàê
    func summarizeEmotionLogs() -> String {
        guard !logs.isEmpty else {
            return "ÊÑüÊÉÖ„É≠„Ç∞„Åå„Åæ„Å†Ë®òÈå≤„Åï„Çå„Å¶„ÅÑ„Åæ„Åõ„Çì„ÄÇ"
        }

        let recent = logs.prefix(7)
        let emotions = recent.map { $0.emotion }
        let counts = Dictionary(grouping: emotions, by: { $0 }).mapValues { $0.count }
        let dominant = counts.max(by: { $0.value < $1.value })?.key ?? .neutral

        switch dominant {
        case .happy:
            return "üòä ÊúÄËøë„ÅØ„Éù„Ç∏„ÉÜ„Ç£„Éñ„Å™Ê∞óÊåÅ„Å°„ÅåÂ§ö„ÅèË®òÈå≤„Åï„Çå„Å¶„ÅÑ„Åæ„Åô„ÄÇ„Åì„ÅÆË™øÂ≠ê„Åß„ÅÑ„Åç„Åæ„Åó„Çá„ÅÜÔºÅ"
        case .sad:
            return "üò¢ ÊúÄËøë„ÅØÂ∞ë„ÅóËêΩ„Å°Ëæº„ÇÄÂÇæÂêë„ÅåË¶ã„Çâ„Çå„Åæ„Åô„ÄÇÁÑ°ÁêÜ„Åõ„Åö„ÄÅ„ÇÜ„Å£„Åè„ÇäÊï¥„Åà„Å¶„ÅÑ„Åç„Åæ„Åó„Çá„ÅÜ„ÄÇ"
        case .angry:
            return "üò† ÊÄí„Çä„ÅÆÊÑüÊÉÖ„ÅåÁõÆÁ´ã„Å£„Å¶„ÅÑ„Åæ„Åô„ÄÇÊ∑±ÂëºÂê∏„ÇÑ‰ºëÊÅØ„ÇíÊÑèË≠ò„Åó„Å¶„Åø„Åæ„Åó„Çá„ÅÜ„ÄÇ"
        case .neutral:
            return "üòê ÊÑüÊÉÖ„ÅØÂÆâÂÆö„Åó„Å¶„ÅÑ„Åæ„Åô„ÄÇËá™ÂàÜ„ÅÆ„Éö„Éº„Çπ„ÇíÂ§ßÂàá„Å´„Åó„Å¶„Åè„Å†„Åï„ÅÑ„ÄÇ"
        case .thinking:
            return "ü§î ÊúÄËøë„ÅØËÄÉ„ÅàËæº„ÇÄÊôÇÈñì„ÅåÂ§ö„ÅÑ„Çà„ÅÜ„Åß„Åô„ÄÇ„Åò„Å£„Åè„ÇäÊï¥ÁêÜ„Åó„Å¶„ÅÑ„Åç„Åæ„Åó„Çá„ÅÜ„ÄÇ"
        case .sexy:
            return "‚ù§Ô∏è Ëá™‰ø°„Å®È≠ÖÂäõ„ÅåÈ´ò„Åæ„Å£„Å¶„ÅÑ„Åæ„Åô„ÄÇÁ¥†Êïµ„Å™„Ç®„Éç„É´„ÇÆ„Éº„ÇíÊ¥ª„Åã„Åó„Åæ„Åó„Çá„ÅÜ„ÄÇ"
        case .encouraging:
            return "üí™ Âë®Âõ≤„ÇíÂä±„Åæ„ÅôÂäõ„ÅåÂº∑„Åæ„Å£„Å¶„ÅÑ„Åæ„Åô„ÄÇ„ÅÇ„Å™„Åü„ÅÆË®ÄËëâ„ÅåÂäõ„Å´„Å™„Çä„Åæ„Åô„ÄÇ"
        }
    }

    // MARK: - „Éá„Éº„ÇøÂ±§„ÅÆÊîØÈÖçÁöÑÊÑüÊÉÖ„ÇíËøî„ÅôÔºàÈü≥Â£∞ÂêàÊàêÁî®Ôºâ
    func determineDominantEmotion() -> EmotionType {
        guard !logs.isEmpty else { return .neutral }

        let recent = logs.prefix(7)
        let emotions = recent.map { $0.emotion }
        let counts = Dictionary(grouping: emotions, by: { $0 }).mapValues { $0.count }
        return counts.max(by: { $0.value < $1.value })?.key ?? .neutral
    }
}
