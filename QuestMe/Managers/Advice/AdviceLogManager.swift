//
//  AdviceLogManager.swift
//  QuestMe
//
//  üìÇ Ê†ºÁ¥çÂ†¥ÊâÄ:
//      QuestMe/Managers/Advice/AdviceLogManager.swift
//
//  üéØ „Éï„Ç°„Ç§„É´„ÅÆÁõÆÁöÑ:
//      - „Ç¢„Éâ„Éê„Ç§„ÇπÂ±•Ê≠¥„ÇíË™≠„ÅøËæº„Åø„Éª‰øùÂ≠ò„ÉªÂâäÈô§„Åô„Çã„ÄÇ
//      - AdviceManager „Å®„ÅÆÂêçÂâçË°ùÁ™Å„ÇíÈÅø„Åë„Çã„Åü„ÇÅ„ÄÅAdviceLogManager „Å´ÊîπÂêç„ÄÇ
//      - CompanionAdviceView „ÇÑÂ±•Ê≠¥ÂàÜÊûê„Ç®„É≥„Ç∏„É≥„Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„Çã„ÄÇ
//      - JSON „Éï„Ç°„Ç§„É´„Éô„Éº„Çπ„ÅßÊ∞∏Á∂öÂåñ„ÄÇ
//

import Foundation

final class AdviceLogManager {
    static let shared = AdviceLogManager()

    private let fileName = "advice_log.json"

    private var fileURL: URL {
        FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
            .appendingPathComponent(fileName)
    }

    func loadAll() -> [[String: Any]] {
        guard let data = try? Data(contentsOf: fileURL),
              let logs = try? JSONSerialization.jsonObject(with: data) as? [[String: Any]] else {
            return []
        }
        return logs
    }

    func save(_ entry: [String: Any]) {
        var logs = loadAll()
        logs.append(entry)
        do {
            let data = try JSONSerialization.data(withJSONObject: logs, options: .prettyPrinted)
            try data.write(to: fileURL)
        } catch {
            print("‰øùÂ≠òÂ§±Êïó: \(error)")
        }
    }

    func clear() {
        try? FileManager.default.removeItem(at: fileURL)
    }
}
