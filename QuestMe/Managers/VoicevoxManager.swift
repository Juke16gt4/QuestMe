//
//  VoicevoxManager.swift
//  QuestMe
//
//  üìÇ Ê†ºÁ¥çÂ†¥ÊâÄ:
//      QuestMe/Managers/VoicevoxManager.swift
//
//  üéØ „Éï„Ç°„Ç§„É´„ÅÆÁõÆÁöÑ:
//      VOICEVOXÈÄ£Êê∫Âá¶ÁêÜ„ÇíÁÆ°ÁêÜ„Åô„ÇãÊßãÈÄ†‰Ωì„ÄÇ
//      - Êé•Á∂öÁ¢∫Ë™ç„ÉªÈü≥Â£∞ÁîüÊàê„Éª‰øùÂ≠ò„ÉªÂÜçÁîü„Åæ„Åß„Çí„Ç¢„Éó„É™ÂÜÖ„ÅßÂÆåÁµê„ÄÇ
//      - ÊïÖ‰∫∫„ÅÆÂ£∞„ÇíÂÑÄÂºèÁöÑ„Å´ÂÜçÁèæ„Åó„ÄÅ„É¶„Éº„Ç∂„Éº„ÅÆÂøÉ„Å´Ë™û„Çä„Åã„Åë„ÇãÂ≠òÂú®„ÇíÂÆø„Åô„ÄÇ
//      - CompanionSetupView „ÇÑ VoicePlaybackView „Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„Çã„ÄÇ
//
//  üîó ‰æùÂ≠ò:
//      - VOICEVOX APIÔºàaudio_query / synthesisÔºâ
//      - AVFoundationÔºàÈü≥Â£∞ÂÜçÁîüÔºâ
//      - SwiftUIÔºàBinding„Å´„Çà„ÇãÂÜçÁîüÁä∂ÊÖãÁÆ°ÁêÜÔºâ
//      - URLSessionÔºàÈÄö‰ø°Âá¶ÁêÜÔºâ
//
//  üë§ Ë£Ω‰ΩúËÄÖ: Ê¥•Êùë Ê∑≥‰∏Ä
//  üìÖ Âà∂‰ΩúÊó•: 2025Âπ¥10Êúà3Êó•

import Foundation
import AVFoundation
import SwiftUI

/// VOICEVOXÈÄ£Êê∫Âá¶ÁêÜ„ÇíÁÆ°ÁêÜ„Åô„ÇãÊßãÈÄ†‰Ωì„ÄÇÊé•Á∂öÁ¢∫Ë™ç„ÉªÈü≥Â£∞ÁîüÊàê„Éª‰øùÂ≠ò„ÉªÂÜçÁîü„Åæ„Åß„Çí„Ç¢„Éó„É™ÂÜÖ„ÅßÂÆåÁµê„Åï„Åõ„Çã„ÄÇ
struct VoicevoxManager {
    let baseURL = "http://127.0.0.1:50021"

    /// VOICEVOX„ÅåËµ∑Âãï„Åó„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç„Åô„Çã„ÄÇÊàêÂäüÊôÇ„ÅØ true „ÇíËøî„Åô„ÄÇ
    func checkConnection(completion: @escaping (Bool) -> Void) {
        guard let url = URL(string: "\(baseURL)/speakers") else {
            completion(false)
            return
        }

        URLSession.shared.dataTask(with: url) { data, response, error in
            let isConnected = (data != nil && error == nil)
            completion(isConnected)
        }.resume()
    }

    /// ÊåáÂÆö„ÉÜ„Ç≠„Çπ„Éà„Å®Ë©±ËÄÖID„Åã„ÇâÈü≥Â£∞„ÇíÁîüÊàê„Åó„ÄÅ‰∏ÄÊôÇ‰øùÂ≠òURL„ÇíËøî„Åô„ÄÇ
    func generateVoice(text: String, speakerId: Int, completion: @escaping (URL?) -> Void) {
        guard let queryURL = URL(string: "\(baseURL)/audio_query?speaker=\(speakerId)&text=\(text)"),
              let synthesisURL = URL(string: "\(baseURL)/synthesis?speaker=\(speakerId)") else {
            completion(nil)
            return
        }

        var queryRequest = URLRequest(url: queryURL)
        queryRequest.httpMethod = "POST"

        URLSession.shared.dataTask(with: queryRequest) { queryData, _, _ in
            guard let queryData = queryData else {
                completion(nil)
                return
            }

            var synthesisRequest = URLRequest(url: synthesisURL)
            synthesisRequest.httpMethod = "POST"
            synthesisRequest.httpBody = queryData
            synthesisRequest.setValue("application/json", forHTTPHeaderField: "Content-Type")

            URLSession.shared.dataTask(with: synthesisRequest) { audioData, _, _ in
                guard let audioData = audioData else {
                    completion(nil)
                    return
                }

                let tempURL = FileManager.default.temporaryDirectory.appendingPathComponent("companion_voice.wav")
                do {
                    try audioData.write(to: tempURL)
                    completion(tempURL)
                } catch {
                    completion(nil)
                }
            }.resume()
        }.resume()
    }

    /// ‰øùÂ≠ò„Åï„Çå„ÅüÈü≥Â£∞„ÇíÂÜçÁîü„Åô„Çã„ÄÇÂÜçÁîü‰∏≠„ÅØ isSpeaking „Çí true „Å´„Åô„Çã„ÄÇ
    func playVoice(from url: URL, isSpeaking: Binding<Bool>) {
        do {
            let player = try AVAudioPlayer(contentsOf: url)
            isSpeaking.wrappedValue = true
            player.play()

            DispatchQueue.main.asyncAfter(deadline: .now() + player.duration) {
                isSpeaking.wrappedValue = false
            }
        } catch {
            isSpeaking.wrappedValue = false
        }
    }
}

