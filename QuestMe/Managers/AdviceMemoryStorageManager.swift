//
//  AdviceMemoryStorageManager.swift
//  QuestMe
//
//  üìÇ Ê†ºÁ¥çÂ†¥ÊâÄ:
//      QuestMe/Managers/AdviceMemoryStorageManager.swift
//
//  üéØ „Éï„Ç°„Ç§„É´„ÅÆÁõÆÁöÑ:
//      - ÊÑüÊÉÖÂ±•Ê≠¥„Çí SQLite „Å´‰øùÂ≠ò„ÉªÂèñÂæó„Åô„Çã„ÄÇ
//      - CompanionOverlay „Åã„ÇâÂëº„Å≥Âá∫„Åï„Çå„ÄÅÈü≥Â£∞Ê°àÂÜÖ„Å®ÈÄ£Âãï„Åó„Å¶Â±•Ê≠¥„ÇíË®òÈå≤„ÄÇ
//      - AdviceMemoryStorageManager+Public.swift „Åã„ÇâÊã°Âºµ„Åï„Çå„Çã„ÄÇ
//      - „ÉÜ„Éº„Éñ„É´: AdviceMemoryLog(date TEXT, feeling TEXT)
//
//  üßë‚Äçüíª ‰ΩúÊàêËÄÖ: Ê¥•Êùë Ê∑≥‰∏Ä (Junichi Tsumura)
//  üóìÔ∏è Âà∂‰ΩúÊó•: 2025Âπ¥10Êúà10Êó• JST
//
//  üîó ‰æùÂ≠ò:
//      - SQLite3ÔºàÊ∞∏Á∂öÂåñÔºâ
//      - EmotionType.swiftÔºàÊÑüÊÉÖ„Çø„Ç§„ÉóÔºâ
//

import Foundation
import SQLite3

final class AdviceMemoryStorageManager {
    static let shared = AdviceMemoryStorageManager()
    private let dbFileName = "AdviceMemory.sqlite"
    private(set) var db: OpaquePointer?

    private init() {
        openDatabase()
        createTableIfNeeded()
    }

    private func openDatabase() {
        let dir = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first!
        let dbURL = dir.appendingPathComponent(dbFileName)
        if sqlite3_open(dbURL.path, &db) != SQLITE_OK {
            print("‚ùå SQLite DB „Ç™„Éº„Éó„É≥Â§±Êïó")
        }
    }

    private func createTableIfNeeded() {
        let sql = """
        CREATE TABLE IF NOT EXISTS AdviceMemoryLog (
            date TEXT NOT NULL,
            feeling TEXT NOT NULL
        );
        """
        var stmt: OpaquePointer?
        if sqlite3_prepare_v2(db, sql, -1, &stmt, nil) == SQLITE_OK {
            sqlite3_step(stmt)
        }
        sqlite3_finalize(stmt)
    }

    /// ÊÑüÊÉÖ„Çí‰øùÂ≠òÔºàISO8601ÂΩ¢Âºè„ÅßÊó•‰ªòË®òÈå≤Ôºâ
    func saveFeeling(_ feeling: EmotionType) {
        let dateStr = ISO8601DateFormatter().string(from: Date())
        let sql = "INSERT INTO AdviceMemoryLog (date, feeling) VALUES (?, ?);"
        var stmt: OpaquePointer?

        if sqlite3_prepare_v2(db, sql, -1, &stmt, nil) == SQLITE_OK {
            sqlite3_bind_text(stmt, 1, dateStr, -1, nil)
            sqlite3_bind_text(stmt, 2, feeling.rawValue, -1, nil) // ‚úÖ rawValue „Çí‰øùÂ≠ò
            sqlite3_step(stmt)
        }
        sqlite3_finalize(stmt)
    }

    /// ÊúÄÊñ∞„ÅÆÊÑüÊÉÖ„ÇíÂèñÂæó
    func fetchLatestFeeling() -> EmotionType? {
        let sql = "SELECT feeling FROM AdviceMemoryLog ORDER BY date DESC LIMIT 1;"
        var stmt: OpaquePointer?
        var result: String?

        if sqlite3_prepare_v2(db, sql, -1, &stmt, nil) == SQLITE_OK {
            if sqlite3_step(stmt) == SQLITE_ROW {
                result = String(cString: sqlite3_column_text(stmt, 0))
            }
        }
        sqlite3_finalize(stmt)

        return EmotionType(rawValue: result ?? "") // ‚úÖ CompanionEmotion ‚Üí EmotionType „Å´Áµ±‰∏Ä
    }
}
