//
//  FaceRecognitionView.swift
//  QuestMe
//
//  üìÇ Ê†ºÁ¥çÂ†¥ÊâÄ:
//      QuestMe/UI/Authentication/Face/FaceRecognitionView.swift
//
//  üéØ „Éï„Ç°„Ç§„É´„ÅÆÁõÆÁöÑ:
//      „É¶„Éº„Ç∂„Éº„ÅÆÈ°îÁîªÂÉè„ÇíÂèñÂæó„Åó„ÄÅ‰øùÂ≠òÊ∏à„ÅøÈ°îÁâπÂæ¥Èáè„Å®ÁÖßÂêà„Åó„Å¶Ë™çË®º„Åô„Çã„Éì„É•„Éº„ÄÇ
//      - „Ç´„É°„É©„ÅßÈ°î„ÇíÊíÆÂΩ± ‚Üí È°îÁâπÂæ¥ÈáèÊäΩÂá∫ ‚Üí ‰øùÂ≠òÊ∏à„Åø„Éá„Éº„Çø„Å®ÁÖßÂêà„ÄÇ
//      - CompanionProfile.faceprintData „Å®ÊØîËºÉ„Åó„Å¶Ë™çË®º„ÄÇ
//      - Ë™çË®ºÊàêÂäüÊôÇ„Å´ onAuthenticated() „ÇíÂëº„Å≥Âá∫„Åô„ÄÇ
//      - LocalizationManager „ÇíÂà©Áî®„Åó„Å¶Â§öË®ÄË™ûÂØæÂøúÔºà„ÉÜ„Ç≠„Çπ„Éà„ÉªÈü≥Â£∞Ôºâ„ÄÇ
//
//  üîó ‰æùÂ≠ò:
//      - UIKitÔºàUIImagePickerControllerÔºâ
//      - FaceAuthenticator.swiftÔºàÁÖßÂêà„É≠„Ç∏„ÉÉ„ÇØÔºâ
//      - ProfileStorage.swiftÔºà‰øùÂ≠òÊ∏à„Åø„Éó„É≠„Éï„Ç£„Éº„É´Ôºâ
//      - LocalizationManager.swiftÔºàÊñáË®ÄÁÆ°ÁêÜÔºâ
//      - SupportedLanguage.swiftÔºàË®ÄË™ûÂÆöÁæ©Ôºâ
//
//  üë§ Ë£Ω‰ΩúËÄÖ: Ê¥•Êùë Ê∑≥‰∏Ä
//  üìÖ ‰øÆÊ≠£Êó•: 2025Âπ¥10Êúà16Êó•
//

import SwiftUI
import UIKit
import AVFoundation

struct FaceRecognitionView: View {
    var onAuthenticated: () -> Void

    @EnvironmentObject var locale: LocalizationManager
    @State private var showCamera = false
    @State private var capturedImage: UIImage?

    var body: some View {
        VStack(spacing: 16) {
            Text(locale.localized("face_auth_title"))
                .font(.headline)

            Button(locale.localized("face_capture_button")) {
                showCamera = true
            }

            if let image = capturedImage {
                Image(uiImage: image)
                    .resizable()
                    .scaledToFit()
                    .frame(height: 200)
                    .cornerRadius(12)

                Button(locale.localized("face_verify_button")) {
                    verifyFace(image)
                }
                .padding()
                .background(Color.green.opacity(0.2))
                .cornerRadius(12)
            }
        }
        .sheet(isPresented: $showCamera) {
            ImageCaptureView(image: $capturedImage)
        }
        .padding()
    }

    // MARK: - È°îÁÖßÂêà
    private func verifyFace(_ image: UIImage) {
        guard let storedData = ProfileStorage.loadProfiles().first?.faceprintData else {
            print(locale.localized("face_no_target"))
            return
        }

        if FaceAuthenticator.verify(image: image, against: storedData) {
            let success = locale.localized("face_auth_success")
            print("‚úÖ \(success)")
            speak(success)
            onAuthenticated()
        } else {
            let fail = locale.localized("face_auth_fail")
            print("‚ùå \(fail)")
            speak(fail)
        }
    }

    // MARK: - Èü≥Â£∞„Éï„Ç£„Éº„Éâ„Éê„ÉÉ„ÇØ
    private func speak(_ text: String) {
        let utterance = AVSpeechUtterance(string: text)
        utterance.voice = AVSpeechSynthesisVoice(language: locale.current.speechCode)
        utterance.rate = 0.5
        AVSpeechSynthesizer().speak(utterance)
    }
}
