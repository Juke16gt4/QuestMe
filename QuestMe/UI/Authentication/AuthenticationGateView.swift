//
//  AuthenticationGateView.swift
//  QuestMe
//
//  üìÇ Ê†ºÁ¥çÂ†¥ÊâÄ:
//      QuestMe/UI/Authentication/AuthenticationGateView.swift
//
//  üéØ „Éï„Ç°„Ç§„É´„ÅÆÁõÆÁöÑ:
//      - Ë™çË®º„Ç≤„Éº„ÉàÁîªÈù¢ÔºàÈü≥Â£∞„ÉªÈ°îË™çË®ºÔºâ
//      - LocalizationManager „Å´„Çà„ÇãÂ§öË®ÄË™ûÂØæÂøúÔºàUIË°®Á§∫„ÉªÈü≥Â£∞ÂêàÊàêÔºâ
//      - Ë™çË®ºÊàêÂäüÊôÇ„Å´ CompanionSetupView „Å∏ÈÅ∑Áßª
//
//  üîó ‰æùÂ≠ò:
//      - Authentication/Voice/VoiceprintRecognitionView.swiftÔºàÈü≥Â£∞Ë™çË®ºÔºâ
//      - UI/Authentication/Face/FaceRecognitionView.swiftÔºàÈ°îË™çË®ºÔºâ
//      - Managers/LocalizationManager.swiftÔºà@EnvironmentObjectÔºâ
//      - Setup/CompanionSetupView.swiftÔºàÈÅ∑ÁßªÂÖàÔºâ
//
//  üë§ ‰ΩúÊàêËÄÖ: Ê¥•Êùë Ê∑≥‰∏Ä
//  üìÖ ‰øÆÊ≠£Áâà: 2025Âπ¥10Êúà24Êó•ÔºàÊõñÊòß init Ëß£Ê∂àÔºâ
//

import SwiftUI
import AVFoundation

struct AuthenticationGateView: View {
    @EnvironmentObject var locale: LocalizationManager
    @State private var voiceAuthenticated = false
    @State private var faceAuthenticated = false
    @State private var navigateToCompanionSetup = false

    var body: some View {
        NavigationStack {
            VStack(spacing: 32) {
                Text(locale.localized("auth_title"))
                    .font(.title2)
                    .padding()

                let voiceAuthHandler: () -> Void = {
                    voiceAuthenticated = true
                    navigateToCompanionSetup = true
                    speak(locale.localized("voice_auth_success"))
                }

                let faceAuthHandler: () -> Void = {
                    faceAuthenticated = true
                    navigateToCompanionSetup = true
                    speak(locale.localized("face_auth_success"))
                }

                VoiceprintRecognitionView(onAuthenticated: voiceAuthHandler)
                FaceRecognitionView(onAuthenticated: faceAuthHandler)
            }
            .padding()
            // ‚úÖ iOS16‰ª•Èôç„ÅÆÊé®Â•®API„Å´Â§âÊõ¥
            .navigationDestination(isPresented: $navigateToCompanionSetup) {
                CompanionSetupView()
            }
        }
    }

    private func speak(_ text: String) {
        let utterance = AVSpeechUtterance(string: text)
        utterance.voice = AVSpeechSynthesisVoice(language: locale.speechCode())
        utterance.rate = 0.5
        AVSpeechSynthesizer().speak(utterance)
    }
}
